- name: Create jumpbox user accounts and create ssh keys
  user:
    name: "{{ item.user }}"
    generate_ssh_key: true
    ssh_key_comment: "{{ item.user }}@{{ansible_hostname}}"
  with_items: "{{ users }}"
  register: users_info
  become: yes

- name: Sign users given public_key
  uri:
    url: http://{{ vault_addr }}:{{ vault_port }}/v1/{{ vault_ssh_engine }}/sign/{{ item.item.vault_role }}
    method: POST
    body: {"public_key": "{{ item.item.public_key }}"}
    body_format: json
    headers:
      Content-Type: application/json
      X-Vault-Token: "{{ lookup('file', '{{ vault_token_dir }}') }}"
    return_content: yes
  register: given_key_json_response
  when: item.changed
  with_items: "{{ users_info.results }}"

- name: Copy signed user key
  copy:
     content: "{{ item.json.data.signed_key }}"
     dest: "/tmp/{{ item.item.name }}-signed.pub"
  with_items: "{{ given_key_json_response.results }}"
  when: item.json is defined
  become: yes

- name: Sign generated certificate for user accounts
  uri:
    url: "http://{{ hostvars[groups['tag_Name_vault01'][0]].ansible_host }}:{{ vault_port }}/v1/{{ vault_ssh_engine }}/sign/{{ vault_default_role }}"
    method: POST
    body: {"public_key": "{{ item.ssh_public_key }}"}
    body_format: json
    headers:
      Content-Type: application/json
      X-Vault-Token: "{{ lookup('file', '{{ vault_token_dir }}') }}"
    return_content: yes
  register: json_response
  when: item.changed
  with_items: "{{ users_info.results }}"

- name: Copy signed certificate
  copy:
    content: "{{ item.json.data.signed_key }}"
    dest: "/home/{{ item.item.name }}/.ssh/id_rsa-cert.pub"
    owner: "{{ item.item.name }}"
    group: "{{ item.item.name }}"
  with_items: "{{ json_response.results }}"
  when: item.json is defined
  become: yes

- name: Generate user principals file
  copy:
    content: dev
    dest: "/etc/ssh/auth_principals/{{ item.user }}"
    force: no
  with_items: "{{ users }}"
  become: yes

- name: Get google pam config for user
  stat:
    path: "/home/{{ item.item.user }}/.google_authenticator"
  register: google_pam_cfg
  with_items: "{{ users_info.results }}"
  become: yes

- name: Generate google pam TOTP secrets
  shell: google-authenticator -t -d -f -r 3 -R 30 -w 3
  args:
    chdir: ~/
  register: google_pam_output
  with_items: "{{ google_pam_cfg.results }}"
  when: not item.stat.exists
  become_user: "{{ item.item.item.user }}"
  become: yes

- name: Copy pam secrets
  copy:
     src: "/home/{{ item.item.user }}/.google_authenticator"
     dest: "/tmp/{{ item.item.user }}.google_authenticator"
     remote_src: true
  when: item.changed
  with_items: "{{ users_info.results }}"
  become: yes
  become_user: root

- name: Copy pam url
  lineinfile:
    dest: "/tmp/{{ item.item.item.name }}.google_authenticator"
    regexp: '^https'
    line: "{{ item.stdout_lines[0] }}"
  when: item.changed
  with_items: "{{ google_pam_output.results }}"
  become: yes

